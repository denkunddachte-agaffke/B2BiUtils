/*
  Copyright 2018 - 2023 denk & dachte Software GmbH

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.09.13 at 10:15:10 AM CEST 
//


package de.denkunddachte.sspcmapi.cd;

import javax.xml.bind.annotation.XmlRegistry;

import de.denkunddachte.enums.CipherSuite;
import de.denkunddachte.ft.CDNode;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the b2biutils.cd package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class CdObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: b2biutils.cd
     * 
     */
    public CdObjectFactory() {
    }

    /**
     * Create an instance of {@link InboundNodes }
     * 
     */
    public InboundNodes createInboundNodes() {
        return new InboundNodes();
    }

    /**
     * Create an instance of {@link CdAdapterDef }
     * 
     */
    public CdAdapterDef createCdAdapterDef() {
        return new CdAdapterDef();
    }

    /**
     * Create an instance of {@link CdAdapterDef.Properties }
     * 
     */
    public CdAdapterDef.Properties createCdAdapterDefProperties() {
        return new CdAdapterDef.Properties();
    }

    /**
     * Create an instance of {@link CdAdapterDef.Engines }
     * 
     */
    public CdAdapterDef.Engines createCdAdapterDefEngines() {
        return new CdAdapterDef.Engines();
    }

    /**
     * Create an instance of {@link InboundNodes.InboundNodeDef }
     * 
     */
    public InboundNodes.InboundNodeDef createInboundNodesInboundNodeDef() {
        return new InboundNodes.InboundNodeDef();
    }

    /**
     * Create an instance of {@link InboundNodes.InboundNodeDef.SslInfo }
     * 
     */
    public InboundNodes.InboundNodeDef.SslInfo createInboundNodesInboundNodeDefSslInfo() {
        return new InboundNodes.InboundNodeDef.SslInfo();
    }

    /**
     * Create an instance of {@link InboundNodes.InboundNodeDef.Addresses }
     * 
     */
    public InboundNodes.InboundNodeDef.Addresses createInboundNodesInboundNodeDefAddresses() {
        return new InboundNodes.InboundNodeDef.Addresses();
    }

    /**
     * Create an instance of {@link NetmapDef }
     * 
     */
    public NetmapDef createNetmapDef() {
        return new NetmapDef();
    }

    /**
     * Create an instance of {@link CdPolicyDef }
     * 
     */
    public CdPolicyDef createCdPolicyDef() {
        return new CdPolicyDef();
    }

    /**
     * Create an instance of {@link CdAdapterDef.Properties.Property }
     * 
     */
    public CdAdapterDef.Properties.Property createCdAdapterDefPropertiesProperty() {
        return new CdAdapterDef.Properties.Property();
    }

    /**
     * Create an instance of {@link CdAdapterDef.Engines.Engine }
     * 
     */
    public CdAdapterDef.Engines.Engine createCdAdapterDefEnginesEngine() {
        return new CdAdapterDef.Engines.Engine();
    }

    /**
     * Create an instance of {@link InboundNodes.InboundNodeDef.OutboundACLNodes }
     * 
     */
    public InboundNodes.InboundNodeDef.OutboundACLNodes createInboundNodesInboundNodeDefOutboundACLNodes() {
        return new InboundNodes.InboundNodeDef.OutboundACLNodes();
    }

    /**
     * Create an instance of {@link InboundNodes.InboundNodeDef.SslInfo.CipherSuites }
     * 
     */
    public InboundNodes.InboundNodeDef.SslInfo.CipherSuites createInboundNodesInboundNodeDefSslInfoCipherSuites() {
        return new InboundNodes.InboundNodeDef.SslInfo.CipherSuites();
    }

    /**
     * Create an instance of {@link InboundNodes.InboundNodeDef.SslInfo.TrustedCertNames }
     * 
     */
    public InboundNodes.InboundNodeDef.SslInfo.TrustedCertNames createInboundNodesInboundNodeDefSslInfoTrustedCertNames() {
        return new InboundNodes.InboundNodeDef.SslInfo.TrustedCertNames();
    }

    /**
     * Create an instance of {@link InboundNodes.InboundNodeDef.Addresses.Address }
     * 
     */
    public InboundNodes.InboundNodeDef.Addresses.Address createInboundNodesInboundNodeDefAddressesAddress() {
        return new InboundNodes.InboundNodeDef.Addresses.Address();
    }

    // create custom objects and configure with defaults
    public InboundNodes.InboundNodeDef createInboundNodesInboundNodeDef(CDNode node) {
      InboundNodes.InboundNodeDef sspnode = createInboundNodesInboundNodeDef();
      sspnode.setName(node.getNodeName());
      sspnode.setDescription(node.getDescription());
      sspnode.setServerAddress(node.getTcpAddress());
      sspnode.setPeerAddressPattern(node.getTcpAddress());
      sspnode.setPort(node.getPort());
      sspnode.setPolicyId(node.getNetmapPolicyName());
      sspnode.setTcpTimeout(node.getTcpTimeout());
      InboundNodes.InboundNodeDef.Addresses addresses = createInboundNodesInboundNodeDefAddresses();
      InboundNodes.InboundNodeDef.Addresses.Address address = createInboundNodesInboundNodeDefAddressesAddress();
      address.setNodeName(sspnode.getName());
      address.setHost(sspnode.getServerAddress());
      address.setPort(sspnode.getPort());
      addresses.getAddress().add(address);
      sspnode.setAddresses(addresses);
      sspnode.setLogLevel(node.getLogLevel().name());
      
      if (node.isSecurePlus()) {
        InboundNodes.InboundNodeDef.SslInfo sslInfo = createInboundNodesInboundNodeDefSslInfo();
        if (node.getCertificateCommonName() != null) {
          sslInfo.setVerifyCommonName(true);
          sslInfo.setCertificateCommonName(node.getCertificateCommonName());
        }
        sslInfo.setClientAuthenticationCD(node.isRequireClientAuthentication());
        sslInfo.setProtocol(node.getSecurityProtocol().getSspProtcolString());
        sslInfo.setKeyStoreName(node.getSspKeyStoreName());
        sslInfo.setKeyCertName(node.getSystemCertificateName());
        sslInfo.setTrustStoreName(node.getSspTruststoreName());
        for (String cacert : node.getCaCertificates().keySet()) {
          sslInfo.getTrustedCertNames().getTrustedCertName().add(cacert);
        }
        for (CipherSuite cipher : node.getCipherSuites()) {
          sslInfo.getCipherSuites().getCipherSuite().add(cipher.sspCode());
        }
        sspnode.setSslInfo(sslInfo);
        sspnode.setSecureConnection(true);
      }
      return sspnode;
  }   
}
